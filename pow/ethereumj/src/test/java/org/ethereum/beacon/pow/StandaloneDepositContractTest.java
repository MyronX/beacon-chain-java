package org.ethereum.beacon.pow;

import java.math.BigInteger;
import java.time.Duration;
import java.util.Arrays;
import org.apache.commons.codec.binary.Hex;
import org.ethereum.beacon.core.operations.deposit.DepositInput;
import org.ethereum.beacon.pow.DepositContract.ChainStart;
import org.ethereum.beacon.ssz.SSZSerializer;
import org.ethereum.beacon.ssz.SSZSerializerBuilder;
import org.ethereum.beacon.ssz.type.BytesCodec;
import org.ethereum.beacon.ssz.type.HashCodec;
import org.ethereum.beacon.ssz.type.UIntCodec;
import org.ethereum.beacon.types.Ether;
import org.ethereum.config.SystemProperties;
import org.ethereum.facade.Ethereum;
import org.ethereum.solidity.compiler.CompilationResult.ContractMetadata;
import org.ethereum.util.blockchain.SolidityCallResult;
import org.ethereum.util.blockchain.SolidityContract;
import org.ethereum.util.blockchain.StandaloneBlockchain;
import org.ethereum.util.blockchain.StandaloneBlockchain.SolidityContractImpl;
import org.junit.Assert;
import org.junit.Test;
import reactor.core.publisher.Mono;
import tech.pegasys.artemis.ethereum.core.Address;
import tech.pegasys.artemis.ethereum.core.Hash32;
import tech.pegasys.artemis.util.bytes.Bytes96;
import tech.pegasys.artemis.util.bytes.BytesValue;
import tech.pegasys.artemis.util.bytes.BytesValues;
import tech.pegasys.artemis.util.bytes.MutableBytes48;

public class StandaloneDepositContractTest {

  // modified contract:
  // CHAIN_START_FULL_DEPOSIT_THRESHOLD: constant(uint256) = 16  # 2**14
  // SECONDS_PER_DAY: constant(uint256) = 5

  String depositBin = "600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052341561009e57600080fd5b6101406000601f818352015b600061014051602081106100bd57600080fd5b600060c052602060c020015460208261016001015260208101905061014051602081106100e957600080fd5b600060c052602060c020015460208261016001015260208101905080610160526101609050805160208201209050606051600161014051018060405190131561013157600080fd5b809190121561013f57600080fd5b6020811061014c57600080fd5b600060c052602060c0200155606051600161014051018060405190131561017257600080fd5b809190121561018057600080fd5b6020811061018d57600080fd5b600060c052602060c020015460605160016101405101806040519013156101b357600080fd5b80919012156101c157600080fd5b602081106101ce57600080fd5b600160c052602060c02001555b81516001018083528114156100aa575b5050610edb56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263c5f2892f60005114156101cc5734156100ac57600080fd5b6000610140526002546101605261018060006020818352015b600160026100d257600080fd5b60026101605106141561013c57600061018051602081106100f257600080fd5b600160c052602060c0200154602082610220010152602081019050610140516020826102200101526020810190508061022052610220905080516020820120905061014052610195565b6000610140516020826101a0010152602081019050610180516020811061016257600080fd5b600060c052602060c02001546020826101a0010152602081019050806101a0526101a09050805160208201209050610140525b61016060026101a357600080fd5b60028151048152505b81516001018083528114156100c5575b50506101405160005260206000f3005b6398b1e06a6000511415610ce35760206004610140376108206004356004016101603761080060043560040135111561020457600080fd5b670de0b6b3a764000034101561021957600080fd5b6801bc16d674ec80000034111561022f57600080fd5b6002546109a0526018600860208206610ac0016000633b9aca0061025257600080fd5b633b9aca003404602082610a6001015260208101905080610a6052610a60905051828401111561028157600080fd5b602080610ae0826020602088068803016000633b9aca006102a157600080fd5b633b9aca003404602082610a6001015260208101905080610a6052610a60905001600060046015f15050818152809050905090508051602001806109c0828460006004600a8704601201f16102f557600080fd5b50506018600860208206610c4001600042602082610be001015260208101905080610be052610be0905051828401111561032e57600080fd5b602080610c6082602060208806880301600042602082610be001015260208101905080610be052610be0905001600060046015f1505081815280905090509050805160200180610b40828460006004600a8704601201f161038e57600080fd5b505060006109c060088060208461152001018260208501600060046012f1505080518201915050610b4060088060208461152001018260208501600060046012f150508051820191505061016061080080602084611520010182602085016000600460def150508051820191505080611520526115209050805160200180610cc0828460006004600a8704601201f161042657600080fd5b50506018600860208206611e800160006109a051602082611e2001015260208101905080611e2052611e20905051828401111561046257600080fd5b602080611ea08260206020880688030160006109a051602082611e2001015260208101905080611e2052611e20905001600060046015f1505081815280905090509050805160200180611d80828460006004600a8704601201f16104c557600080fd5b50506000611f00526002611f2052611f4060006020818352015b6000611f20516104ee57600080fd5b611f20516109a05160016109a05101101561050857600080fd5b60016109a051010614151561051c57610588565b611f0060605160018251018060405190131561053757600080fd5b809190121561054557600080fd5b815250611f208051151561055a576000610574565b600281516002835102041461056e57600080fd5b60028151025b8152505b81516001018083528114156104df575b5050610cc0805160208201209050611f6052611f8060006020818352015b611f0051611f8051121561060d576000611f8051602081106105c757600080fd5b600160c052602060c0200154602082611fa0010152602081019050611f6051602082611fa001015260208101905080611fa052611fa09050805160208201209050611f60525b5b81516001018083528114156105a6575b5050611f6051611f00516020811061063557600080fd5b600160c052602060c0200155600280546001825401101561065557600080fd5b60018154018155506020612100600463c5f2892f6120a0526120bc6000305af161067e57600080fd5b6121005161208052600160c052602060c02054612160526001600160c052602060c0200154612180526002600160c052602060c02001546121a0526003600160c052602060c02001546121c0526004600160c052602060c02001546121e0526005600160c052602060c0200154612200526006600160c052602060c0200154612220526007600160c052602060c0200154612240526008600160c052602060c0200154612260526009600160c052602060c020015461228052600a600160c052602060c02001546122a052600b600160c052602060c02001546122c052600c600160c052602060c02001546122e052600d600160c052602060c020015461230052600e600160c052602060c020015461232052600f600160c052602060c0200154612340526010600160c052602060c0200154612360526011600160c052602060c0200154612380526012600160c052602060c02001546123a0526013600160c052602060c02001546123c0526014600160c052602060c02001546123e0526015600160c052602060c0200154612400526016600160c052602060c0200154612420526017600160c052602060c0200154612440526018600160c052602060c0200154612460526019600160c052602060c020015461248052601a600160c052602060c02001546124a052601b600160c052602060c02001546124c052601c600160c052602060c02001546124e052601d600160c052602060c020015461250052601e600160c052602060c020015461252052601f600160c052602060c020015461254052610460612040526120405161212052610cc08051602001806120405161208001828460006004600a8704601201f16108fa57600080fd5b505061204051612080016120208151610820818352015b6108206120205110151561092457610941565b6000612020516020850101535b8151600101808352811415610911575b505050602061204051612080015160206001820306601f8201039050612040510101612040526120405161214052611d808051602001806120405161208001828460006004600a8704601201f161099757600080fd5b5050612040516120800161202081516020818352015b6020612020511015156109bf576109dc565b6000612020516020850101535b81516001018083528114156109ad575b505050602061204051612080015160206001820306601f8201039050612040510101612040527fce7a77a358682d6c81f71216fb7fb108b03bc8badbf67f5d131ba5363cbefb4261204051612080a16801bc16d674ec800000341415610ce1576003805460018254011015610a5057600080fd5b600181540181555060106003541415610ce0574261258052426125a0526005610a7857600080fd5b60056125a05106612580511015610a8e57600080fd5b426125a0526005610a9e57600080fd5b60056125a05106612580510360054261258052426125a0526005610ac157600080fd5b60056125a05106612580511015610ad757600080fd5b426125a0526005610ae757600080fd5b60056125a051066125805103011015610aff57600080fd5b60054261258052426125a0526005610b1657600080fd5b60056125a05106612580511015610b2c57600080fd5b426125a0526005610b3c57600080fd5b60056125a051066125805103016125605260186008602082066126c00160006125605160208261266001015260208101905080612660526126609050518284011115610b8757600080fd5b6020806126e0826020602088068803016000612560516020826126600101526020810190508061266052612660905001600060046015f15050818152809050905090508051602001806125c0828460006004600a8704601201f1610bea57600080fd5b50506020612820600463c5f2892f6127c0526127dc6000305af1610c0d57600080fd5b612820516127a05260406127605261276051612840526125c0805160200180612760516127a001828460006004600a8704601201f1610c4b57600080fd5b5050612760516127a00161274081516020818352015b602061274051101515610c7357610c90565b6000612740516020850101535b8151600101808352811415610c61575b5050506020612760516127a0015160206001820306601f8201039050612760510101612760527fd1faa3f9bca1d698df559716fe6d1c9999155b38d3158fffbc98d76d568091fc612760516127a0a15b5b005b60006000fd5b6101f2610edb036101f26000396101f2610edb036000f3";
  String abiTestBin = "";

  String abiTestAbi =
      "[{\"name\": \"Deposit\", \"inputs\": [{\"type\": \"bytes32\", \"name\": \"deposit_root\", \"indexed\": false}, {\"type\": \"bytes\", \"name\": \"data\", \"indexed\": false}, {\"type\": \"bytes\", \"name\": \"merkle_tree_index\", \"indexed\": false}, {\"type\": \"bytes32[32]\", \"name\": \"branch\", \"indexed\": false}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"ChainStart\", \"inputs\": [{\"type\": \"bytes32\", \"name\": \"deposit_root\", \"indexed\": false}, {\"type\": \"bytes\", \"name\": \"time\", \"indexed\": false}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"Test\", \"inputs\": [{\"type\": \"bytes32\", \"name\": \"a\", \"indexed\": false}, {\"type\": \"bytes\", \"name\": \"data\", \"indexed\": false}], \"anonymous\": false, \"type\": \"event\"}, {\"name\": \"__init__\", \"outputs\": [], \"inputs\": [], \"constant\": false, \"payable\": false, \"type\": \"constructor\"}, {\"name\": \"get_deposit_root\", \"outputs\": [{\"type\": \"bytes32\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 30775}, {\"name\": \"f\", \"outputs\": [], \"inputs\": [{\"type\": \"bytes\", \"name\": \"a\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 49719}, {\"name\": \"deposit\", \"outputs\": [], \"inputs\": [{\"type\": \"bytes\", \"name\": \"deposit_input\"}], \"constant\": false, \"payable\": true, \"type\": \"function\", \"gas\": 637708}]\n";

  BigInteger depositAmount =
      BigInteger.valueOf(32L * 1_000_000_000L).multiply(BigInteger.valueOf(1_000_000_000L));

  @Test
  public void test1() {
    StandaloneBlockchain sb = new StandaloneBlockchain()
        .withAutoblock(true);
    ContractMetadata contractMetadata = new ContractMetadata();
    contractMetadata.abi = ContractAbi.getContractAbi();
    contractMetadata.bin = depositBin;
    SolidityContract contract = sb.submitNewContract(contractMetadata);
    Object[] ret = contract.callConstFunction("get_deposit_root");
    System.out.println(Hex.encodeHexString((byte[]) ret[0]));

    SSZSerializer sszSerializer = SSZSerializerBuilder.getBakedAnnotationBuilder()
        .addCodec(new UIntCodec())
        .addCodec(new HashCodec())
        .addCodec(new BytesCodec())
        .build();

    for(int i = 0; i < 20; i++) {
      MutableBytes48 pubKey = MutableBytes48.create();
      pubKey.set(0, (byte) i);
      DepositInput depositInput = new DepositInput(pubKey, Hash32.ZERO, Bytes96.ZERO);
      byte[] depositInputBytes = sszSerializer.encode(depositInput);

      SolidityCallResult result = contract.callFunction(
          depositAmount,
          "deposit",
          (Object) depositInputBytes);

      Assert.assertTrue(result.isSuccessful());
      Assert.assertEquals(i == 15 ? 2 : 1, result.getEvents().size());
    }

    for (int i = 0; i < 16; i++) {
      sb.createBlock();
    }

    Ethereum ethereum = new StandaloneEthereum(new SystemProperties(), sb);
    EthereumJDepositContract depositContract = new EthereumJDepositContract(
        ethereum, 0, BytesValue.wrap(contract.getAddress()).toString());
    depositContract.setDistanceFromHead(3);

    ChainStart chainStart = Mono.from(depositContract.getChainStartMono())
        .block(Duration.ofSeconds(2));

    System.out.println(chainStart);

    ret = contract.callConstFunction("get_deposit_root");
    System.out.println(Hex.encodeHexString((byte[]) ret[0]));
  }

  @Test
  public void testVyperAbi() {
    StandaloneBlockchain sb = new StandaloneBlockchain()
        .withAutoblock(true);
    ContractMetadata contractMetadata = new ContractMetadata();
    contractMetadata.abi = abiTestAbi.replaceAll(", *\"gas\": *[0-9]+", "");
    contractMetadata.bin = abiTestBin.replace("0x", "");
    SolidityContract contract = sb.submitNewContract(contractMetadata);
    ((SolidityContractImpl) contract).addRelatedContract(ContractAbi.getContractAbi()); // TODO ethJ bug workaround

      byte[] bytes = new byte[64];
      Arrays.fill(bytes, (byte) 0x33);

      SolidityCallResult result = contract.callFunction(
          "f",
          (Object) bytes);

    Object[] returnValues = result.getEvents().get(0).args;
    System.out.println(result);
  }
}
